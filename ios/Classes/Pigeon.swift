// Autogenerated from Pigeon (v26.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsPigeon(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsPigeon(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsPigeon(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashPigeon(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashPigeon(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashPigeon(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

enum PollingOptionPigeon: Int {
  case iso14443 = 0
  case iso15693 = 1
  case iso18092 = 2
}

enum NdefStatusPigeon: Int {
  case notSupported = 0
  case readWrite = 1
  case readOnly = 2
}

enum TypeNameFormatPigeon: Int {
  case empty = 0
  case wellKnown = 1
  case media = 2
  case absoluteUri = 3
  case external = 4
  case unknown = 5
  case unchanged = 6
}

enum FeliCaPollingRequestCodePigeon: Int {
  case noRequest = 0
  case systemCode = 1
  case communicationPerformance = 2
}

enum FeliCaPollingTimeSlotPigeon: Int {
  case max1 = 0
  case max2 = 1
  case max4 = 2
  case max8 = 3
  case max16 = 4
}

enum MiFareFamilyPigeon: Int {
  case unknown = 0
  case ultralight = 1
  case plus = 2
  case desfire = 3
}

enum Iso15693RequestFlagPigeon: Int {
  case address = 0
  case dualSubCarriers = 1
  case highDataRate = 2
  case option = 3
  case protocolExtension = 4
  case select = 5
}

enum NfcVasCommandConfigurationModePigeon: Int {
  case normal = 0
  case urlOnly = 1
}

enum NfcReaderErrorCodePigeon: Int {
  case readerSessionInvalidationErrorFirstNdefTagRead = 0
  case readerSessionInvalidationErrorSessionTerminatedUnexpectedly = 1
  case readerSessionInvalidationErrorSessionTimeout = 2
  case readerSessionInvalidationErrorSystemIsBusy = 3
  case readerSessionInvalidationErrorUserCanceled = 4
  case ndefReaderSessionErrorTagNotWritable = 5
  case ndefReaderSessionErrorTagSizeTooSmall = 6
  case ndefReaderSessionErrorTagUpdateFailure = 7
  case ndefReaderSessionErrorZeroLengthMessage = 8
  case readerTransceiveErrorRetryExceeded = 9
  case readerTransceiveErrorTagConnectionLost = 10
  case readerTransceiveErrorTagNotConnected = 11
  case readerTransceiveErrorTagResponseError = 12
  case readerTransceiveErrorSessionInvalidated = 13
  case readerTransceiveErrorPacketTooLong = 14
  case tagCommandConfigurationErrorInvalidParameters = 15
  case readerErrorAccessNotAccepted = 16
  case readerErrorIneligible = 17
  case readerErrorUnsupportedFeature = 18
  case readerErrorInvalidParameter = 19
  case readerErrorInvalidParameterLength = 20
  case readerErrorParameterOutOfBound = 21
  case readerErrorRadioDisabled = 22
  case readerErrorSecurityViolation = 23
}

enum NfcVasResponseErrorCodePigeon: Int {
  case success = 0
  case userIntervention = 1
  case dataNotActivated = 2
  case dataNotFound = 3
  case incorrectData = 4
  case unsupportedApplicationVersion = 5
  case wrongLCField = 6
  case wrongParameters = 7
}

/// Generated class from Pigeon that represents data sent in messages.
struct TagPigeon: Hashable {
  var handle: String
  var ndef: NdefPigeon? = nil
  var feliCa: FeliCaPigeon? = nil
  var iso15693: Iso15693Pigeon? = nil
  var iso7816: Iso7816Pigeon? = nil
  var miFare: MiFarePigeon? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> TagPigeon? {
    let handle = pigeonVar_list[0] as! String
    let ndef: NdefPigeon? = nilOrValue(pigeonVar_list[1])
    let feliCa: FeliCaPigeon? = nilOrValue(pigeonVar_list[2])
    let iso15693: Iso15693Pigeon? = nilOrValue(pigeonVar_list[3])
    let iso7816: Iso7816Pigeon? = nilOrValue(pigeonVar_list[4])
    let miFare: MiFarePigeon? = nilOrValue(pigeonVar_list[5])

    return TagPigeon(
      handle: handle,
      ndef: ndef,
      feliCa: feliCa,
      iso15693: iso15693,
      iso7816: iso7816,
      miFare: miFare
    )
  }
  func toList() -> [Any?] {
    return [
      handle,
      ndef,
      feliCa,
      iso15693,
      iso7816,
      miFare,
    ]
  }
  static func == (lhs: TagPigeon, rhs: TagPigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NdefPigeon: Hashable {
  var status: NdefStatusPigeon
  var capacity: Int64
  var cachedNdefMessage: NdefMessagePigeon? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NdefPigeon? {
    let status = pigeonVar_list[0] as! NdefStatusPigeon
    let capacity = pigeonVar_list[1] as! Int64
    let cachedNdefMessage: NdefMessagePigeon? = nilOrValue(pigeonVar_list[2])

    return NdefPigeon(
      status: status,
      capacity: capacity,
      cachedNdefMessage: cachedNdefMessage
    )
  }
  func toList() -> [Any?] {
    return [
      status,
      capacity,
      cachedNdefMessage,
    ]
  }
  static func == (lhs: NdefPigeon, rhs: NdefPigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FeliCaPigeon: Hashable {
  var currentSystemCode: FlutterStandardTypedData
  var currentIDm: FlutterStandardTypedData
  var manufacturerParameter: FlutterStandardTypedData


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> FeliCaPigeon? {
    let currentSystemCode = pigeonVar_list[0] as! FlutterStandardTypedData
    let currentIDm = pigeonVar_list[1] as! FlutterStandardTypedData
    let manufacturerParameter = pigeonVar_list[2] as! FlutterStandardTypedData

    return FeliCaPigeon(
      currentSystemCode: currentSystemCode,
      currentIDm: currentIDm,
      manufacturerParameter: manufacturerParameter
    )
  }
  func toList() -> [Any?] {
    return [
      currentSystemCode,
      currentIDm,
      manufacturerParameter,
    ]
  }
  static func == (lhs: FeliCaPigeon, rhs: FeliCaPigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Iso15693Pigeon: Hashable {
  var icManufacturerCode: Int64
  var icSerialNumber: FlutterStandardTypedData
  var identifier: FlutterStandardTypedData


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Iso15693Pigeon? {
    let icManufacturerCode = pigeonVar_list[0] as! Int64
    let icSerialNumber = pigeonVar_list[1] as! FlutterStandardTypedData
    let identifier = pigeonVar_list[2] as! FlutterStandardTypedData

    return Iso15693Pigeon(
      icManufacturerCode: icManufacturerCode,
      icSerialNumber: icSerialNumber,
      identifier: identifier
    )
  }
  func toList() -> [Any?] {
    return [
      icManufacturerCode,
      icSerialNumber,
      identifier,
    ]
  }
  static func == (lhs: Iso15693Pigeon, rhs: Iso15693Pigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Iso7816Pigeon: Hashable {
  var initialSelectedAID: String
  var identifier: FlutterStandardTypedData
  var historicalBytes: FlutterStandardTypedData? = nil
  var applicationData: FlutterStandardTypedData? = nil
  var proprietaryApplicationDataCoding: Bool


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Iso7816Pigeon? {
    let initialSelectedAID = pigeonVar_list[0] as! String
    let identifier = pigeonVar_list[1] as! FlutterStandardTypedData
    let historicalBytes: FlutterStandardTypedData? = nilOrValue(pigeonVar_list[2])
    let applicationData: FlutterStandardTypedData? = nilOrValue(pigeonVar_list[3])
    let proprietaryApplicationDataCoding = pigeonVar_list[4] as! Bool

    return Iso7816Pigeon(
      initialSelectedAID: initialSelectedAID,
      identifier: identifier,
      historicalBytes: historicalBytes,
      applicationData: applicationData,
      proprietaryApplicationDataCoding: proprietaryApplicationDataCoding
    )
  }
  func toList() -> [Any?] {
    return [
      initialSelectedAID,
      identifier,
      historicalBytes,
      applicationData,
      proprietaryApplicationDataCoding,
    ]
  }
  static func == (lhs: Iso7816Pigeon, rhs: Iso7816Pigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MiFarePigeon: Hashable {
  var mifareFamily: MiFareFamilyPigeon
  var identifier: FlutterStandardTypedData
  var historicalBytes: FlutterStandardTypedData? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MiFarePigeon? {
    let mifareFamily = pigeonVar_list[0] as! MiFareFamilyPigeon
    let identifier = pigeonVar_list[1] as! FlutterStandardTypedData
    let historicalBytes: FlutterStandardTypedData? = nilOrValue(pigeonVar_list[2])

    return MiFarePigeon(
      mifareFamily: mifareFamily,
      identifier: identifier,
      historicalBytes: historicalBytes
    )
  }
  func toList() -> [Any?] {
    return [
      mifareFamily,
      identifier,
      historicalBytes,
    ]
  }
  static func == (lhs: MiFarePigeon, rhs: MiFarePigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NdefQueryStatusPigeon: Hashable {
  var status: NdefStatusPigeon
  var capacity: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NdefQueryStatusPigeon? {
    let status = pigeonVar_list[0] as! NdefStatusPigeon
    let capacity = pigeonVar_list[1] as! Int64

    return NdefQueryStatusPigeon(
      status: status,
      capacity: capacity
    )
  }
  func toList() -> [Any?] {
    return [
      status,
      capacity,
    ]
  }
  static func == (lhs: NdefQueryStatusPigeon, rhs: NdefQueryStatusPigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NdefMessagePigeon: Hashable {
  var records: [NdefPayloadPigeon]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NdefMessagePigeon? {
    let records = pigeonVar_list[0] as! [NdefPayloadPigeon]

    return NdefMessagePigeon(
      records: records
    )
  }
  func toList() -> [Any?] {
    return [
      records
    ]
  }
  static func == (lhs: NdefMessagePigeon, rhs: NdefMessagePigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NdefPayloadPigeon: Hashable {
  var typeNameFormat: TypeNameFormatPigeon
  var type: FlutterStandardTypedData
  var identifier: FlutterStandardTypedData
  var payload: FlutterStandardTypedData


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NdefPayloadPigeon? {
    let typeNameFormat = pigeonVar_list[0] as! TypeNameFormatPigeon
    let type = pigeonVar_list[1] as! FlutterStandardTypedData
    let identifier = pigeonVar_list[2] as! FlutterStandardTypedData
    let payload = pigeonVar_list[3] as! FlutterStandardTypedData

    return NdefPayloadPigeon(
      typeNameFormat: typeNameFormat,
      type: type,
      identifier: identifier,
      payload: payload
    )
  }
  func toList() -> [Any?] {
    return [
      typeNameFormat,
      type,
      identifier,
      payload,
    ]
  }
  static func == (lhs: NdefPayloadPigeon, rhs: NdefPayloadPigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FeliCaPollingResponsePigeon: Hashable {
  var manufacturerParameter: FlutterStandardTypedData
  var requestData: FlutterStandardTypedData? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> FeliCaPollingResponsePigeon? {
    let manufacturerParameter = pigeonVar_list[0] as! FlutterStandardTypedData
    let requestData: FlutterStandardTypedData? = nilOrValue(pigeonVar_list[1])

    return FeliCaPollingResponsePigeon(
      manufacturerParameter: manufacturerParameter,
      requestData: requestData
    )
  }
  func toList() -> [Any?] {
    return [
      manufacturerParameter,
      requestData,
    ]
  }
  static func == (lhs: FeliCaPollingResponsePigeon, rhs: FeliCaPollingResponsePigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FeliCaReadWithoutEncryptionResponsePigeon: Hashable {
  var statusFlag1: Int64
  var statusFlag2: Int64
  var blockData: [FlutterStandardTypedData]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> FeliCaReadWithoutEncryptionResponsePigeon? {
    let statusFlag1 = pigeonVar_list[0] as! Int64
    let statusFlag2 = pigeonVar_list[1] as! Int64
    let blockData = pigeonVar_list[2] as! [FlutterStandardTypedData]

    return FeliCaReadWithoutEncryptionResponsePigeon(
      statusFlag1: statusFlag1,
      statusFlag2: statusFlag2,
      blockData: blockData
    )
  }
  func toList() -> [Any?] {
    return [
      statusFlag1,
      statusFlag2,
      blockData,
    ]
  }
  static func == (lhs: FeliCaReadWithoutEncryptionResponsePigeon, rhs: FeliCaReadWithoutEncryptionResponsePigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FeliCaRequestServiceV2ResponsePigeon: Hashable {
  var statusFlag1: Int64
  var statusFlag2: Int64
  var encryptionIdentifier: Int64
  var nodeKeyVersionListAES: [FlutterStandardTypedData]? = nil
  var nodeKeyVersionListDES: [FlutterStandardTypedData]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> FeliCaRequestServiceV2ResponsePigeon? {
    let statusFlag1 = pigeonVar_list[0] as! Int64
    let statusFlag2 = pigeonVar_list[1] as! Int64
    let encryptionIdentifier = pigeonVar_list[2] as! Int64
    let nodeKeyVersionListAES: [FlutterStandardTypedData]? = nilOrValue(pigeonVar_list[3])
    let nodeKeyVersionListDES: [FlutterStandardTypedData]? = nilOrValue(pigeonVar_list[4])

    return FeliCaRequestServiceV2ResponsePigeon(
      statusFlag1: statusFlag1,
      statusFlag2: statusFlag2,
      encryptionIdentifier: encryptionIdentifier,
      nodeKeyVersionListAES: nodeKeyVersionListAES,
      nodeKeyVersionListDES: nodeKeyVersionListDES
    )
  }
  func toList() -> [Any?] {
    return [
      statusFlag1,
      statusFlag2,
      encryptionIdentifier,
      nodeKeyVersionListAES,
      nodeKeyVersionListDES,
    ]
  }
  static func == (lhs: FeliCaRequestServiceV2ResponsePigeon, rhs: FeliCaRequestServiceV2ResponsePigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FeliCaRequestSpecificationVersionResponsePigeon: Hashable {
  var statusFlag1: Int64
  var statusFlag2: Int64
  var basicVersion: FlutterStandardTypedData? = nil
  var optionVersion: FlutterStandardTypedData? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> FeliCaRequestSpecificationVersionResponsePigeon? {
    let statusFlag1 = pigeonVar_list[0] as! Int64
    let statusFlag2 = pigeonVar_list[1] as! Int64
    let basicVersion: FlutterStandardTypedData? = nilOrValue(pigeonVar_list[2])
    let optionVersion: FlutterStandardTypedData? = nilOrValue(pigeonVar_list[3])

    return FeliCaRequestSpecificationVersionResponsePigeon(
      statusFlag1: statusFlag1,
      statusFlag2: statusFlag2,
      basicVersion: basicVersion,
      optionVersion: optionVersion
    )
  }
  func toList() -> [Any?] {
    return [
      statusFlag1,
      statusFlag2,
      basicVersion,
      optionVersion,
    ]
  }
  static func == (lhs: FeliCaRequestSpecificationVersionResponsePigeon, rhs: FeliCaRequestSpecificationVersionResponsePigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FeliCaStatusFlagPigeon: Hashable {
  var statusFlag1: Int64
  var statusFlag2: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> FeliCaStatusFlagPigeon? {
    let statusFlag1 = pigeonVar_list[0] as! Int64
    let statusFlag2 = pigeonVar_list[1] as! Int64

    return FeliCaStatusFlagPigeon(
      statusFlag1: statusFlag1,
      statusFlag2: statusFlag2
    )
  }
  func toList() -> [Any?] {
    return [
      statusFlag1,
      statusFlag2,
    ]
  }
  static func == (lhs: FeliCaStatusFlagPigeon, rhs: FeliCaStatusFlagPigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Iso7816ApduPigeon: Hashable {
  var instructionClass: Int64
  var instructionCode: Int64
  var p1Parameter: Int64
  var p2Parameter: Int64
  var data: FlutterStandardTypedData
  var expectedResponseLength: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Iso7816ApduPigeon? {
    let instructionClass = pigeonVar_list[0] as! Int64
    let instructionCode = pigeonVar_list[1] as! Int64
    let p1Parameter = pigeonVar_list[2] as! Int64
    let p2Parameter = pigeonVar_list[3] as! Int64
    let data = pigeonVar_list[4] as! FlutterStandardTypedData
    let expectedResponseLength = pigeonVar_list[5] as! Int64

    return Iso7816ApduPigeon(
      instructionClass: instructionClass,
      instructionCode: instructionCode,
      p1Parameter: p1Parameter,
      p2Parameter: p2Parameter,
      data: data,
      expectedResponseLength: expectedResponseLength
    )
  }
  func toList() -> [Any?] {
    return [
      instructionClass,
      instructionCode,
      p1Parameter,
      p2Parameter,
      data,
      expectedResponseLength,
    ]
  }
  static func == (lhs: Iso7816ApduPigeon, rhs: Iso7816ApduPigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Iso7816ResponseApduPigeon: Hashable {
  var payload: FlutterStandardTypedData
  var statusWord1: Int64
  var statusWord2: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Iso7816ResponseApduPigeon? {
    let payload = pigeonVar_list[0] as! FlutterStandardTypedData
    let statusWord1 = pigeonVar_list[1] as! Int64
    let statusWord2 = pigeonVar_list[2] as! Int64

    return Iso7816ResponseApduPigeon(
      payload: payload,
      statusWord1: statusWord1,
      statusWord2: statusWord2
    )
  }
  func toList() -> [Any?] {
    return [
      payload,
      statusWord1,
      statusWord2,
    ]
  }
  static func == (lhs: Iso7816ResponseApduPigeon, rhs: Iso7816ResponseApduPigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Iso15693SystemInfoPigeon: Hashable {
  var dataStorageFormatIdentifier: Int64
  var applicationFamilyIdentifier: Int64
  var blockSize: Int64
  var totalBlocks: Int64
  var icReference: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Iso15693SystemInfoPigeon? {
    let dataStorageFormatIdentifier = pigeonVar_list[0] as! Int64
    let applicationFamilyIdentifier = pigeonVar_list[1] as! Int64
    let blockSize = pigeonVar_list[2] as! Int64
    let totalBlocks = pigeonVar_list[3] as! Int64
    let icReference = pigeonVar_list[4] as! Int64

    return Iso15693SystemInfoPigeon(
      dataStorageFormatIdentifier: dataStorageFormatIdentifier,
      applicationFamilyIdentifier: applicationFamilyIdentifier,
      blockSize: blockSize,
      totalBlocks: totalBlocks,
      icReference: icReference
    )
  }
  func toList() -> [Any?] {
    return [
      dataStorageFormatIdentifier,
      applicationFamilyIdentifier,
      blockSize,
      totalBlocks,
      icReference,
    ]
  }
  static func == (lhs: Iso15693SystemInfoPigeon, rhs: Iso15693SystemInfoPigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NfcReaderSessionErrorPigeon: Hashable {
  var code: NfcReaderErrorCodePigeon
  var message: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NfcReaderSessionErrorPigeon? {
    let code = pigeonVar_list[0] as! NfcReaderErrorCodePigeon
    let message = pigeonVar_list[1] as! String

    return NfcReaderSessionErrorPigeon(
      code: code,
      message: message
    )
  }
  func toList() -> [Any?] {
    return [
      code,
      message,
    ]
  }
  static func == (lhs: NfcReaderSessionErrorPigeon, rhs: NfcReaderSessionErrorPigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NfcVasCommandConfigurationPigeon: Hashable {
  var mode: NfcVasCommandConfigurationModePigeon
  var passIdentifier: String
  var url: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NfcVasCommandConfigurationPigeon? {
    let mode = pigeonVar_list[0] as! NfcVasCommandConfigurationModePigeon
    let passIdentifier = pigeonVar_list[1] as! String
    let url: String? = nilOrValue(pigeonVar_list[2])

    return NfcVasCommandConfigurationPigeon(
      mode: mode,
      passIdentifier: passIdentifier,
      url: url
    )
  }
  func toList() -> [Any?] {
    return [
      mode,
      passIdentifier,
      url,
    ]
  }
  static func == (lhs: NfcVasCommandConfigurationPigeon, rhs: NfcVasCommandConfigurationPigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NfcVasResponsePigeon: Hashable {
  var status: NfcVasResponseErrorCodePigeon
  var vasData: FlutterStandardTypedData
  var mobileToken: FlutterStandardTypedData


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NfcVasResponsePigeon? {
    let status = pigeonVar_list[0] as! NfcVasResponseErrorCodePigeon
    let vasData = pigeonVar_list[1] as! FlutterStandardTypedData
    let mobileToken = pigeonVar_list[2] as! FlutterStandardTypedData

    return NfcVasResponsePigeon(
      status: status,
      vasData: vasData,
      mobileToken: mobileToken
    )
  }
  func toList() -> [Any?] {
    return [
      status,
      vasData,
      mobileToken,
    ]
  }
  static func == (lhs: NfcVasResponsePigeon, rhs: NfcVasResponsePigeon) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

private class PigeonPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PollingOptionPigeon(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return NdefStatusPigeon(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return TypeNameFormatPigeon(rawValue: enumResultAsInt)
      }
      return nil
    case 132:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return FeliCaPollingRequestCodePigeon(rawValue: enumResultAsInt)
      }
      return nil
    case 133:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return FeliCaPollingTimeSlotPigeon(rawValue: enumResultAsInt)
      }
      return nil
    case 134:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return MiFareFamilyPigeon(rawValue: enumResultAsInt)
      }
      return nil
    case 135:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return Iso15693RequestFlagPigeon(rawValue: enumResultAsInt)
      }
      return nil
    case 136:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return NfcVasCommandConfigurationModePigeon(rawValue: enumResultAsInt)
      }
      return nil
    case 137:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return NfcReaderErrorCodePigeon(rawValue: enumResultAsInt)
      }
      return nil
    case 138:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return NfcVasResponseErrorCodePigeon(rawValue: enumResultAsInt)
      }
      return nil
    case 139:
      return TagPigeon.fromList(self.readValue() as! [Any?])
    case 140:
      return NdefPigeon.fromList(self.readValue() as! [Any?])
    case 141:
      return FeliCaPigeon.fromList(self.readValue() as! [Any?])
    case 142:
      return Iso15693Pigeon.fromList(self.readValue() as! [Any?])
    case 143:
      return Iso7816Pigeon.fromList(self.readValue() as! [Any?])
    case 144:
      return MiFarePigeon.fromList(self.readValue() as! [Any?])
    case 145:
      return NdefQueryStatusPigeon.fromList(self.readValue() as! [Any?])
    case 146:
      return NdefMessagePigeon.fromList(self.readValue() as! [Any?])
    case 147:
      return NdefPayloadPigeon.fromList(self.readValue() as! [Any?])
    case 148:
      return FeliCaPollingResponsePigeon.fromList(self.readValue() as! [Any?])
    case 149:
      return FeliCaReadWithoutEncryptionResponsePigeon.fromList(self.readValue() as! [Any?])
    case 150:
      return FeliCaRequestServiceV2ResponsePigeon.fromList(self.readValue() as! [Any?])
    case 151:
      return FeliCaRequestSpecificationVersionResponsePigeon.fromList(self.readValue() as! [Any?])
    case 152:
      return FeliCaStatusFlagPigeon.fromList(self.readValue() as! [Any?])
    case 153:
      return Iso7816ApduPigeon.fromList(self.readValue() as! [Any?])
    case 154:
      return Iso7816ResponseApduPigeon.fromList(self.readValue() as! [Any?])
    case 155:
      return Iso15693SystemInfoPigeon.fromList(self.readValue() as! [Any?])
    case 156:
      return NfcReaderSessionErrorPigeon.fromList(self.readValue() as! [Any?])
    case 157:
      return NfcVasCommandConfigurationPigeon.fromList(self.readValue() as! [Any?])
    case 158:
      return NfcVasResponsePigeon.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class PigeonPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PollingOptionPigeon {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? NdefStatusPigeon {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? TypeNameFormatPigeon {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? FeliCaPollingRequestCodePigeon {
      super.writeByte(132)
      super.writeValue(value.rawValue)
    } else if let value = value as? FeliCaPollingTimeSlotPigeon {
      super.writeByte(133)
      super.writeValue(value.rawValue)
    } else if let value = value as? MiFareFamilyPigeon {
      super.writeByte(134)
      super.writeValue(value.rawValue)
    } else if let value = value as? Iso15693RequestFlagPigeon {
      super.writeByte(135)
      super.writeValue(value.rawValue)
    } else if let value = value as? NfcVasCommandConfigurationModePigeon {
      super.writeByte(136)
      super.writeValue(value.rawValue)
    } else if let value = value as? NfcReaderErrorCodePigeon {
      super.writeByte(137)
      super.writeValue(value.rawValue)
    } else if let value = value as? NfcVasResponseErrorCodePigeon {
      super.writeByte(138)
      super.writeValue(value.rawValue)
    } else if let value = value as? TagPigeon {
      super.writeByte(139)
      super.writeValue(value.toList())
    } else if let value = value as? NdefPigeon {
      super.writeByte(140)
      super.writeValue(value.toList())
    } else if let value = value as? FeliCaPigeon {
      super.writeByte(141)
      super.writeValue(value.toList())
    } else if let value = value as? Iso15693Pigeon {
      super.writeByte(142)
      super.writeValue(value.toList())
    } else if let value = value as? Iso7816Pigeon {
      super.writeByte(143)
      super.writeValue(value.toList())
    } else if let value = value as? MiFarePigeon {
      super.writeByte(144)
      super.writeValue(value.toList())
    } else if let value = value as? NdefQueryStatusPigeon {
      super.writeByte(145)
      super.writeValue(value.toList())
    } else if let value = value as? NdefMessagePigeon {
      super.writeByte(146)
      super.writeValue(value.toList())
    } else if let value = value as? NdefPayloadPigeon {
      super.writeByte(147)
      super.writeValue(value.toList())
    } else if let value = value as? FeliCaPollingResponsePigeon {
      super.writeByte(148)
      super.writeValue(value.toList())
    } else if let value = value as? FeliCaReadWithoutEncryptionResponsePigeon {
      super.writeByte(149)
      super.writeValue(value.toList())
    } else if let value = value as? FeliCaRequestServiceV2ResponsePigeon {
      super.writeByte(150)
      super.writeValue(value.toList())
    } else if let value = value as? FeliCaRequestSpecificationVersionResponsePigeon {
      super.writeByte(151)
      super.writeValue(value.toList())
    } else if let value = value as? FeliCaStatusFlagPigeon {
      super.writeByte(152)
      super.writeValue(value.toList())
    } else if let value = value as? Iso7816ApduPigeon {
      super.writeByte(153)
      super.writeValue(value.toList())
    } else if let value = value as? Iso7816ResponseApduPigeon {
      super.writeByte(154)
      super.writeValue(value.toList())
    } else if let value = value as? Iso15693SystemInfoPigeon {
      super.writeByte(155)
      super.writeValue(value.toList())
    } else if let value = value as? NfcReaderSessionErrorPigeon {
      super.writeByte(156)
      super.writeValue(value.toList())
    } else if let value = value as? NfcVasCommandConfigurationPigeon {
      super.writeByte(157)
      super.writeValue(value.toList())
    } else if let value = value as? NfcVasResponsePigeon {
      super.writeByte(158)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class PigeonPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PigeonPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PigeonPigeonCodecWriter(data: data)
  }
}

class PigeonPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = PigeonPigeonCodec(readerWriter: PigeonPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol FlutterApiPigeonProtocol {
  func tagSessionDidBecomeActive(completion: @escaping (Result<Void, PigeonError>) -> Void)
  func tagSessionDidDetect(tag tagArg: TagPigeon, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func tagSessionDidInvalidateWithError(error errorArg: NfcReaderSessionErrorPigeon, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func vasSessionDidBecomeActive(completion: @escaping (Result<Void, PigeonError>) -> Void)
  func vasSessionDidReceive(responses responsesArg: [NfcVasResponsePigeon], completion: @escaping (Result<Void, PigeonError>) -> Void)
  func vasSessionDidInvalidateWithError(error errorArg: NfcReaderSessionErrorPigeon, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class FlutterApiPigeon: FlutterApiPigeonProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: PigeonPigeonCodec {
    return PigeonPigeonCodec.shared
  }
  func tagSessionDidBecomeActive(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.tagSessionDidBecomeActive\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func tagSessionDidDetect(tag tagArg: TagPigeon, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.tagSessionDidDetect\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([tagArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func tagSessionDidInvalidateWithError(error errorArg: NfcReaderSessionErrorPigeon, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.tagSessionDidInvalidateWithError\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func vasSessionDidBecomeActive(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.vasSessionDidBecomeActive\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func vasSessionDidReceive(responses responsesArg: [NfcVasResponsePigeon], completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.vasSessionDidReceive\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([responsesArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func vasSessionDidInvalidateWithError(error errorArg: NfcReaderSessionErrorPigeon, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.vasSessionDidInvalidateWithError\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol HostApiPigeon {
  func tagSessionReadingAvailable() throws -> Bool
  func tagSessionBegin(pollingOptions: [PollingOptionPigeon], alertMessage: String?, invalidateAfterFirstRead: Bool) throws
  func tagSessionInvalidate(alertMessage: String?, errorMessage: String?) throws
  func tagSessionRestartPolling() throws
  func tagSessionSetAlertMessage(alertMessage: String) throws
  func vasSessionReadingAvailable() throws -> Bool
  func vasSessionBegin(configurations: [NfcVasCommandConfigurationPigeon], alertMessage: String?) throws
  func vasSessionInvalidate(alertMessage: String?, errorMessage: String?) throws
  func vasSessionSetAlertMessage(alertMessage: String) throws
  func ndefQueryNdefStatus(handle: String, completion: @escaping (Result<NdefQueryStatusPigeon, Error>) -> Void)
  func ndefReadNdef(handle: String, completion: @escaping (Result<NdefMessagePigeon?, Error>) -> Void)
  func ndefWriteNdef(handle: String, message: NdefMessagePigeon, completion: @escaping (Result<Void, Error>) -> Void)
  func ndefWriteLock(handle: String, completion: @escaping (Result<Void, Error>) -> Void)
  func feliCaPolling(handle: String, systemCode: FlutterStandardTypedData, requestCode: FeliCaPollingRequestCodePigeon, timeSlot: FeliCaPollingTimeSlotPigeon, completion: @escaping (Result<FeliCaPollingResponsePigeon, Error>) -> Void)
  func feliCaRequestService(handle: String, nodeCodeList: [FlutterStandardTypedData], completion: @escaping (Result<[FlutterStandardTypedData], Error>) -> Void)
  func feliCaRequestResponse(handle: String, completion: @escaping (Result<Int64, Error>) -> Void)
  func feliCaReadWithoutEncryption(handle: String, serviceCodeList: [FlutterStandardTypedData], blockList: [FlutterStandardTypedData], completion: @escaping (Result<FeliCaReadWithoutEncryptionResponsePigeon, Error>) -> Void)
  func feliCaWriteWithoutEncryption(handle: String, serviceCodeList: [FlutterStandardTypedData], blockList: [FlutterStandardTypedData], blockData: [FlutterStandardTypedData], completion: @escaping (Result<FeliCaStatusFlagPigeon, Error>) -> Void)
  func feliCaRequestSystemCode(handle: String, completion: @escaping (Result<[FlutterStandardTypedData], Error>) -> Void)
  func feliCaRequestServiceV2(handle: String, nodeCodeList: [FlutterStandardTypedData], completion: @escaping (Result<FeliCaRequestServiceV2ResponsePigeon, Error>) -> Void)
  func feliCaRequestSpecificationVersion(handle: String, completion: @escaping (Result<FeliCaRequestSpecificationVersionResponsePigeon, Error>) -> Void)
  func feliCaResetMode(handle: String, completion: @escaping (Result<FeliCaStatusFlagPigeon, Error>) -> Void)
  func feliCaSendFeliCaCommand(handle: String, commandPacket: FlutterStandardTypedData, completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func miFareSendMiFareCommand(handle: String, commandPacket: FlutterStandardTypedData, completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func miFareSendMiFareISO7816Command(handle: String, apdu: Iso7816ApduPigeon, completion: @escaping (Result<Iso7816ResponseApduPigeon, Error>) -> Void)
  func miFareSendMiFareISO7816CommandRaw(handle: String, data: FlutterStandardTypedData, completion: @escaping (Result<Iso7816ResponseApduPigeon, Error>) -> Void)
  func iso7816SendCommand(handle: String, apdu: Iso7816ApduPigeon, completion: @escaping (Result<Iso7816ResponseApduPigeon, Error>) -> Void)
  func iso7816SendCommandRaw(handle: String, data: FlutterStandardTypedData, completion: @escaping (Result<Iso7816ResponseApduPigeon, Error>) -> Void)
  func iso15693StayQuiet(handle: String, completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693ReadSingleBlock(handle: String, requestFlags: [Iso15693RequestFlagPigeon], blockNumber: Int64, completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func iso15693WriteSingleBlock(handle: String, requestFlags: [Iso15693RequestFlagPigeon], blockNumber: Int64, dataBlock: FlutterStandardTypedData, completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693LockBlock(handle: String, requestFlags: [Iso15693RequestFlagPigeon], blockNumber: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693ReadMultipleBlocks(handle: String, requestFlags: [Iso15693RequestFlagPigeon], blockNumber: Int64, numberOfBlocks: Int64, completion: @escaping (Result<[FlutterStandardTypedData], Error>) -> Void)
  func iso15693WriteMultipleBlocks(handle: String, requestFlags: [Iso15693RequestFlagPigeon], blockNumber: Int64, numberOfBlocks: Int64, dataBlocks: [FlutterStandardTypedData], completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693Select(handle: String, requestFlags: [Iso15693RequestFlagPigeon], completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693ResetToReady(handle: String, requestFlags: [Iso15693RequestFlagPigeon], completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693WriteAfi(handle: String, requestFlags: [Iso15693RequestFlagPigeon], afi: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693LockAfi(handle: String, requestFlags: [Iso15693RequestFlagPigeon], completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693WriteDsfId(handle: String, requestFlags: [Iso15693RequestFlagPigeon], dsfId: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693LockDsfId(handle: String, requestFlags: [Iso15693RequestFlagPigeon], completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693GetSystemInfo(handle: String, requestFlags: [Iso15693RequestFlagPigeon], completion: @escaping (Result<Iso15693SystemInfoPigeon, Error>) -> Void)
  func iso15693GetMultipleBlockSecurityStatus(handle: String, requestFlags: [Iso15693RequestFlagPigeon], blockNumber: Int64, numberOfBlocks: Int64, completion: @escaping (Result<[Int64], Error>) -> Void)
  func iso15693CustomCommand(handle: String, requestFlags: [Iso15693RequestFlagPigeon], customCommandCode: Int64, customRequestParameters: FlutterStandardTypedData, completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class HostApiPigeonSetup {
  static var codec: FlutterStandardMessageCodec { PigeonPigeonCodec.shared }
  /// Sets up an instance of `HostApiPigeon` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: HostApiPigeon?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let tagSessionReadingAvailableChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.tagSessionReadingAvailable\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      tagSessionReadingAvailableChannel.setMessageHandler { _, reply in
        do {
          let result = try api.tagSessionReadingAvailable()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      tagSessionReadingAvailableChannel.setMessageHandler(nil)
    }
    let tagSessionBeginChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.tagSessionBegin\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      tagSessionBeginChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pollingOptionsArg = args[0] as! [PollingOptionPigeon]
        let alertMessageArg: String? = nilOrValue(args[1])
        let invalidateAfterFirstReadArg = args[2] as! Bool
        do {
          try api.tagSessionBegin(pollingOptions: pollingOptionsArg, alertMessage: alertMessageArg, invalidateAfterFirstRead: invalidateAfterFirstReadArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      tagSessionBeginChannel.setMessageHandler(nil)
    }
    let tagSessionInvalidateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.tagSessionInvalidate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      tagSessionInvalidateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let alertMessageArg: String? = nilOrValue(args[0])
        let errorMessageArg: String? = nilOrValue(args[1])
        do {
          try api.tagSessionInvalidate(alertMessage: alertMessageArg, errorMessage: errorMessageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      tagSessionInvalidateChannel.setMessageHandler(nil)
    }
    let tagSessionRestartPollingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.tagSessionRestartPolling\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      tagSessionRestartPollingChannel.setMessageHandler { _, reply in
        do {
          try api.tagSessionRestartPolling()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      tagSessionRestartPollingChannel.setMessageHandler(nil)
    }
    let tagSessionSetAlertMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.tagSessionSetAlertMessage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      tagSessionSetAlertMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let alertMessageArg = args[0] as! String
        do {
          try api.tagSessionSetAlertMessage(alertMessage: alertMessageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      tagSessionSetAlertMessageChannel.setMessageHandler(nil)
    }
    let vasSessionReadingAvailableChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.vasSessionReadingAvailable\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      vasSessionReadingAvailableChannel.setMessageHandler { _, reply in
        do {
          let result = try api.vasSessionReadingAvailable()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      vasSessionReadingAvailableChannel.setMessageHandler(nil)
    }
    let vasSessionBeginChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.vasSessionBegin\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      vasSessionBeginChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configurationsArg = args[0] as! [NfcVasCommandConfigurationPigeon]
        let alertMessageArg: String? = nilOrValue(args[1])
        do {
          try api.vasSessionBegin(configurations: configurationsArg, alertMessage: alertMessageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      vasSessionBeginChannel.setMessageHandler(nil)
    }
    let vasSessionInvalidateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.vasSessionInvalidate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      vasSessionInvalidateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let alertMessageArg: String? = nilOrValue(args[0])
        let errorMessageArg: String? = nilOrValue(args[1])
        do {
          try api.vasSessionInvalidate(alertMessage: alertMessageArg, errorMessage: errorMessageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      vasSessionInvalidateChannel.setMessageHandler(nil)
    }
    let vasSessionSetAlertMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.vasSessionSetAlertMessage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      vasSessionSetAlertMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let alertMessageArg = args[0] as! String
        do {
          try api.vasSessionSetAlertMessage(alertMessage: alertMessageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      vasSessionSetAlertMessageChannel.setMessageHandler(nil)
    }
    let ndefQueryNdefStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.ndefQueryNdefStatus\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      ndefQueryNdefStatusChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        api.ndefQueryNdefStatus(handle: handleArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      ndefQueryNdefStatusChannel.setMessageHandler(nil)
    }
    let ndefReadNdefChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.ndefReadNdef\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      ndefReadNdefChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        api.ndefReadNdef(handle: handleArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      ndefReadNdefChannel.setMessageHandler(nil)
    }
    let ndefWriteNdefChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.ndefWriteNdef\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      ndefWriteNdefChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let messageArg = args[1] as! NdefMessagePigeon
        api.ndefWriteNdef(handle: handleArg, message: messageArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      ndefWriteNdefChannel.setMessageHandler(nil)
    }
    let ndefWriteLockChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.ndefWriteLock\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      ndefWriteLockChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        api.ndefWriteLock(handle: handleArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      ndefWriteLockChannel.setMessageHandler(nil)
    }
    let feliCaPollingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaPolling\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaPollingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let systemCodeArg = args[1] as! FlutterStandardTypedData
        let requestCodeArg = args[2] as! FeliCaPollingRequestCodePigeon
        let timeSlotArg = args[3] as! FeliCaPollingTimeSlotPigeon
        api.feliCaPolling(handle: handleArg, systemCode: systemCodeArg, requestCode: requestCodeArg, timeSlot: timeSlotArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaPollingChannel.setMessageHandler(nil)
    }
    let feliCaRequestServiceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaRequestService\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaRequestServiceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let nodeCodeListArg = args[1] as! [FlutterStandardTypedData]
        api.feliCaRequestService(handle: handleArg, nodeCodeList: nodeCodeListArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaRequestServiceChannel.setMessageHandler(nil)
    }
    let feliCaRequestResponseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaRequestResponse\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaRequestResponseChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        api.feliCaRequestResponse(handle: handleArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaRequestResponseChannel.setMessageHandler(nil)
    }
    let feliCaReadWithoutEncryptionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaReadWithoutEncryption\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaReadWithoutEncryptionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let serviceCodeListArg = args[1] as! [FlutterStandardTypedData]
        let blockListArg = args[2] as! [FlutterStandardTypedData]
        api.feliCaReadWithoutEncryption(handle: handleArg, serviceCodeList: serviceCodeListArg, blockList: blockListArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaReadWithoutEncryptionChannel.setMessageHandler(nil)
    }
    let feliCaWriteWithoutEncryptionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaWriteWithoutEncryption\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaWriteWithoutEncryptionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let serviceCodeListArg = args[1] as! [FlutterStandardTypedData]
        let blockListArg = args[2] as! [FlutterStandardTypedData]
        let blockDataArg = args[3] as! [FlutterStandardTypedData]
        api.feliCaWriteWithoutEncryption(handle: handleArg, serviceCodeList: serviceCodeListArg, blockList: blockListArg, blockData: blockDataArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaWriteWithoutEncryptionChannel.setMessageHandler(nil)
    }
    let feliCaRequestSystemCodeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaRequestSystemCode\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaRequestSystemCodeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        api.feliCaRequestSystemCode(handle: handleArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaRequestSystemCodeChannel.setMessageHandler(nil)
    }
    let feliCaRequestServiceV2Channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaRequestServiceV2\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaRequestServiceV2Channel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let nodeCodeListArg = args[1] as! [FlutterStandardTypedData]
        api.feliCaRequestServiceV2(handle: handleArg, nodeCodeList: nodeCodeListArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaRequestServiceV2Channel.setMessageHandler(nil)
    }
    let feliCaRequestSpecificationVersionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaRequestSpecificationVersion\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaRequestSpecificationVersionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        api.feliCaRequestSpecificationVersion(handle: handleArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaRequestSpecificationVersionChannel.setMessageHandler(nil)
    }
    let feliCaResetModeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaResetMode\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaResetModeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        api.feliCaResetMode(handle: handleArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaResetModeChannel.setMessageHandler(nil)
    }
    let feliCaSendFeliCaCommandChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaSendFeliCaCommand\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaSendFeliCaCommandChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let commandPacketArg = args[1] as! FlutterStandardTypedData
        api.feliCaSendFeliCaCommand(handle: handleArg, commandPacket: commandPacketArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaSendFeliCaCommandChannel.setMessageHandler(nil)
    }
    let miFareSendMiFareCommandChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.miFareSendMiFareCommand\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      miFareSendMiFareCommandChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let commandPacketArg = args[1] as! FlutterStandardTypedData
        api.miFareSendMiFareCommand(handle: handleArg, commandPacket: commandPacketArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      miFareSendMiFareCommandChannel.setMessageHandler(nil)
    }
    let miFareSendMiFareISO7816CommandChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.miFareSendMiFareISO7816Command\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      miFareSendMiFareISO7816CommandChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let apduArg = args[1] as! Iso7816ApduPigeon
        api.miFareSendMiFareISO7816Command(handle: handleArg, apdu: apduArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      miFareSendMiFareISO7816CommandChannel.setMessageHandler(nil)
    }
    let miFareSendMiFareISO7816CommandRawChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.miFareSendMiFareISO7816CommandRaw\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      miFareSendMiFareISO7816CommandRawChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let dataArg = args[1] as! FlutterStandardTypedData
        api.miFareSendMiFareISO7816CommandRaw(handle: handleArg, data: dataArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      miFareSendMiFareISO7816CommandRawChannel.setMessageHandler(nil)
    }
    let iso7816SendCommandChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso7816SendCommand\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso7816SendCommandChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let apduArg = args[1] as! Iso7816ApduPigeon
        api.iso7816SendCommand(handle: handleArg, apdu: apduArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso7816SendCommandChannel.setMessageHandler(nil)
    }
    let iso7816SendCommandRawChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso7816SendCommandRaw\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso7816SendCommandRawChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let dataArg = args[1] as! FlutterStandardTypedData
        api.iso7816SendCommandRaw(handle: handleArg, data: dataArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso7816SendCommandRawChannel.setMessageHandler(nil)
    }
    let iso15693StayQuietChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693StayQuiet\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693StayQuietChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        api.iso15693StayQuiet(handle: handleArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693StayQuietChannel.setMessageHandler(nil)
    }
    let iso15693ReadSingleBlockChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693ReadSingleBlock\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693ReadSingleBlockChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [Iso15693RequestFlagPigeon]
        let blockNumberArg = args[2] as! Int64
        api.iso15693ReadSingleBlock(handle: handleArg, requestFlags: requestFlagsArg, blockNumber: blockNumberArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693ReadSingleBlockChannel.setMessageHandler(nil)
    }
    let iso15693WriteSingleBlockChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693WriteSingleBlock\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693WriteSingleBlockChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [Iso15693RequestFlagPigeon]
        let blockNumberArg = args[2] as! Int64
        let dataBlockArg = args[3] as! FlutterStandardTypedData
        api.iso15693WriteSingleBlock(handle: handleArg, requestFlags: requestFlagsArg, blockNumber: blockNumberArg, dataBlock: dataBlockArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693WriteSingleBlockChannel.setMessageHandler(nil)
    }
    let iso15693LockBlockChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693LockBlock\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693LockBlockChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [Iso15693RequestFlagPigeon]
        let blockNumberArg = args[2] as! Int64
        api.iso15693LockBlock(handle: handleArg, requestFlags: requestFlagsArg, blockNumber: blockNumberArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693LockBlockChannel.setMessageHandler(nil)
    }
    let iso15693ReadMultipleBlocksChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693ReadMultipleBlocks\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693ReadMultipleBlocksChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [Iso15693RequestFlagPigeon]
        let blockNumberArg = args[2] as! Int64
        let numberOfBlocksArg = args[3] as! Int64
        api.iso15693ReadMultipleBlocks(handle: handleArg, requestFlags: requestFlagsArg, blockNumber: blockNumberArg, numberOfBlocks: numberOfBlocksArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693ReadMultipleBlocksChannel.setMessageHandler(nil)
    }
    let iso15693WriteMultipleBlocksChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693WriteMultipleBlocks\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693WriteMultipleBlocksChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [Iso15693RequestFlagPigeon]
        let blockNumberArg = args[2] as! Int64
        let numberOfBlocksArg = args[3] as! Int64
        let dataBlocksArg = args[4] as! [FlutterStandardTypedData]
        api.iso15693WriteMultipleBlocks(handle: handleArg, requestFlags: requestFlagsArg, blockNumber: blockNumberArg, numberOfBlocks: numberOfBlocksArg, dataBlocks: dataBlocksArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693WriteMultipleBlocksChannel.setMessageHandler(nil)
    }
    let iso15693SelectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693Select\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693SelectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [Iso15693RequestFlagPigeon]
        api.iso15693Select(handle: handleArg, requestFlags: requestFlagsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693SelectChannel.setMessageHandler(nil)
    }
    let iso15693ResetToReadyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693ResetToReady\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693ResetToReadyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [Iso15693RequestFlagPigeon]
        api.iso15693ResetToReady(handle: handleArg, requestFlags: requestFlagsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693ResetToReadyChannel.setMessageHandler(nil)
    }
    let iso15693WriteAfiChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693WriteAfi\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693WriteAfiChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [Iso15693RequestFlagPigeon]
        let afiArg = args[2] as! Int64
        api.iso15693WriteAfi(handle: handleArg, requestFlags: requestFlagsArg, afi: afiArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693WriteAfiChannel.setMessageHandler(nil)
    }
    let iso15693LockAfiChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693LockAfi\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693LockAfiChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [Iso15693RequestFlagPigeon]
        api.iso15693LockAfi(handle: handleArg, requestFlags: requestFlagsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693LockAfiChannel.setMessageHandler(nil)
    }
    let iso15693WriteDsfIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693WriteDsfId\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693WriteDsfIdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [Iso15693RequestFlagPigeon]
        let dsfIdArg = args[2] as! Int64
        api.iso15693WriteDsfId(handle: handleArg, requestFlags: requestFlagsArg, dsfId: dsfIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693WriteDsfIdChannel.setMessageHandler(nil)
    }
    let iso15693LockDsfIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693LockDsfId\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693LockDsfIdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [Iso15693RequestFlagPigeon]
        api.iso15693LockDsfId(handle: handleArg, requestFlags: requestFlagsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693LockDsfIdChannel.setMessageHandler(nil)
    }
    let iso15693GetSystemInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693GetSystemInfo\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693GetSystemInfoChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [Iso15693RequestFlagPigeon]
        api.iso15693GetSystemInfo(handle: handleArg, requestFlags: requestFlagsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693GetSystemInfoChannel.setMessageHandler(nil)
    }
    let iso15693GetMultipleBlockSecurityStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693GetMultipleBlockSecurityStatus\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693GetMultipleBlockSecurityStatusChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [Iso15693RequestFlagPigeon]
        let blockNumberArg = args[2] as! Int64
        let numberOfBlocksArg = args[3] as! Int64
        api.iso15693GetMultipleBlockSecurityStatus(handle: handleArg, requestFlags: requestFlagsArg, blockNumber: blockNumberArg, numberOfBlocks: numberOfBlocksArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693GetMultipleBlockSecurityStatusChannel.setMessageHandler(nil)
    }
    let iso15693CustomCommandChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693CustomCommand\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693CustomCommandChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [Iso15693RequestFlagPigeon]
        let customCommandCodeArg = args[2] as! Int64
        let customRequestParametersArg = args[3] as! FlutterStandardTypedData
        api.iso15693CustomCommand(handle: handleArg, requestFlags: requestFlagsArg, customCommandCode: customCommandCodeArg, customRequestParameters: customRequestParametersArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693CustomCommandChannel.setMessageHandler(nil)
    }
  }
}
