// Autogenerated from Pigeon (v26.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum PollingOptionPigeon {
  iso14443,
  iso15693,
  iso18092,
}

enum NdefStatusPigeon {
  notSupported,
  readWrite,
  readOnly,
}

enum TypeNameFormatPigeon {
  empty,
  wellKnown,
  media,
  absoluteUri,
  external,
  unknown,
  unchanged,
}

enum FeliCaPollingRequestCodePigeon {
  noRequest,
  systemCode,
  communicationPerformance,
}

enum FeliCaPollingTimeSlotPigeon {
  max1,
  max2,
  max4,
  max8,
  max16,
}

enum MiFareFamilyPigeon {
  unknown,
  ultralight,
  plus,
  desfire,
}

enum Iso15693RequestFlagPigeon {
  address,
  dualSubCarriers,
  highDataRate,
  option,
  protocolExtension,
  select,
}

enum NfcVasCommandConfigurationModePigeon {
  normal,
  urlOnly,
}

enum NfcReaderErrorCodePigeon {
  readerSessionInvalidationErrorFirstNdefTagRead,
  readerSessionInvalidationErrorSessionTerminatedUnexpectedly,
  readerSessionInvalidationErrorSessionTimeout,
  readerSessionInvalidationErrorSystemIsBusy,
  readerSessionInvalidationErrorUserCanceled,
  ndefReaderSessionErrorTagNotWritable,
  ndefReaderSessionErrorTagSizeTooSmall,
  ndefReaderSessionErrorTagUpdateFailure,
  ndefReaderSessionErrorZeroLengthMessage,
  readerTransceiveErrorRetryExceeded,
  readerTransceiveErrorTagConnectionLost,
  readerTransceiveErrorTagNotConnected,
  readerTransceiveErrorTagResponseError,
  readerTransceiveErrorSessionInvalidated,
  readerTransceiveErrorPacketTooLong,
  tagCommandConfigurationErrorInvalidParameters,
  readerErrorAccessNotAccepted,
  readerErrorIneligible,
  readerErrorUnsupportedFeature,
  readerErrorInvalidParameter,
  readerErrorInvalidParameterLength,
  readerErrorParameterOutOfBound,
  readerErrorRadioDisabled,
  readerErrorSecurityViolation,
}

enum NfcVasResponseErrorCodePigeon {
  success,
  userIntervention,
  dataNotActivated,
  dataNotFound,
  incorrectData,
  unsupportedApplicationVersion,
  wrongLCField,
  wrongParameters,
}

class TagPigeon {
  TagPigeon({
    required this.handle,
    this.ndef,
    this.feliCa,
    this.iso15693,
    this.iso7816,
    this.miFare,
  });

  String handle;

  NdefPigeon? ndef;

  FeliCaPigeon? feliCa;

  Iso15693Pigeon? iso15693;

  Iso7816Pigeon? iso7816;

  MiFarePigeon? miFare;

  List<Object?> _toList() {
    return <Object?>[
      handle,
      ndef,
      feliCa,
      iso15693,
      iso7816,
      miFare,
    ];
  }

  Object encode() {
    return _toList();  }

  static TagPigeon decode(Object result) {
    result as List<Object?>;
    return TagPigeon(
      handle: result[0]! as String,
      ndef: result[1] as NdefPigeon?,
      feliCa: result[2] as FeliCaPigeon?,
      iso15693: result[3] as Iso15693Pigeon?,
      iso7816: result[4] as Iso7816Pigeon?,
      miFare: result[5] as MiFarePigeon?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! TagPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NdefPigeon {
  NdefPigeon({
    required this.status,
    required this.capacity,
    this.cachedNdefMessage,
  });

  NdefStatusPigeon status;

  int capacity;

  NdefMessagePigeon? cachedNdefMessage;

  List<Object?> _toList() {
    return <Object?>[
      status,
      capacity,
      cachedNdefMessage,
    ];
  }

  Object encode() {
    return _toList();  }

  static NdefPigeon decode(Object result) {
    result as List<Object?>;
    return NdefPigeon(
      status: result[0]! as NdefStatusPigeon,
      capacity: result[1]! as int,
      cachedNdefMessage: result[2] as NdefMessagePigeon?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NdefPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class FeliCaPigeon {
  FeliCaPigeon({
    required this.currentSystemCode,
    required this.currentIDm,
    required this.manufacturerParameter,
  });

  Uint8List currentSystemCode;

  Uint8List currentIDm;

  Uint8List manufacturerParameter;

  List<Object?> _toList() {
    return <Object?>[
      currentSystemCode,
      currentIDm,
      manufacturerParameter,
    ];
  }

  Object encode() {
    return _toList();  }

  static FeliCaPigeon decode(Object result) {
    result as List<Object?>;
    return FeliCaPigeon(
      currentSystemCode: result[0]! as Uint8List,
      currentIDm: result[1]! as Uint8List,
      manufacturerParameter: result[2]! as Uint8List,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FeliCaPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class Iso15693Pigeon {
  Iso15693Pigeon({
    required this.icManufacturerCode,
    required this.icSerialNumber,
    required this.identifier,
  });

  int icManufacturerCode;

  Uint8List icSerialNumber;

  Uint8List identifier;

  List<Object?> _toList() {
    return <Object?>[
      icManufacturerCode,
      icSerialNumber,
      identifier,
    ];
  }

  Object encode() {
    return _toList();  }

  static Iso15693Pigeon decode(Object result) {
    result as List<Object?>;
    return Iso15693Pigeon(
      icManufacturerCode: result[0]! as int,
      icSerialNumber: result[1]! as Uint8List,
      identifier: result[2]! as Uint8List,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Iso15693Pigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class Iso7816Pigeon {
  Iso7816Pigeon({
    required this.initialSelectedAID,
    required this.identifier,
    this.historicalBytes,
    this.applicationData,
    required this.proprietaryApplicationDataCoding,
  });

  String initialSelectedAID;

  Uint8List identifier;

  Uint8List? historicalBytes;

  Uint8List? applicationData;

  bool proprietaryApplicationDataCoding;

  List<Object?> _toList() {
    return <Object?>[
      initialSelectedAID,
      identifier,
      historicalBytes,
      applicationData,
      proprietaryApplicationDataCoding,
    ];
  }

  Object encode() {
    return _toList();  }

  static Iso7816Pigeon decode(Object result) {
    result as List<Object?>;
    return Iso7816Pigeon(
      initialSelectedAID: result[0]! as String,
      identifier: result[1]! as Uint8List,
      historicalBytes: result[2] as Uint8List?,
      applicationData: result[3] as Uint8List?,
      proprietaryApplicationDataCoding: result[4]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Iso7816Pigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class MiFarePigeon {
  MiFarePigeon({
    required this.mifareFamily,
    required this.identifier,
    this.historicalBytes,
  });

  MiFareFamilyPigeon mifareFamily;

  Uint8List identifier;

  Uint8List? historicalBytes;

  List<Object?> _toList() {
    return <Object?>[
      mifareFamily,
      identifier,
      historicalBytes,
    ];
  }

  Object encode() {
    return _toList();  }

  static MiFarePigeon decode(Object result) {
    result as List<Object?>;
    return MiFarePigeon(
      mifareFamily: result[0]! as MiFareFamilyPigeon,
      identifier: result[1]! as Uint8List,
      historicalBytes: result[2] as Uint8List?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MiFarePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NdefQueryStatusPigeon {
  NdefQueryStatusPigeon({
    required this.status,
    required this.capacity,
  });

  NdefStatusPigeon status;

  int capacity;

  List<Object?> _toList() {
    return <Object?>[
      status,
      capacity,
    ];
  }

  Object encode() {
    return _toList();  }

  static NdefQueryStatusPigeon decode(Object result) {
    result as List<Object?>;
    return NdefQueryStatusPigeon(
      status: result[0]! as NdefStatusPigeon,
      capacity: result[1]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NdefQueryStatusPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NdefMessagePigeon {
  NdefMessagePigeon({
    required this.records,
  });

  List<NdefPayloadPigeon> records;

  List<Object?> _toList() {
    return <Object?>[
      records,
    ];
  }

  Object encode() {
    return _toList();  }

  static NdefMessagePigeon decode(Object result) {
    result as List<Object?>;
    return NdefMessagePigeon(
      records: (result[0] as List<Object?>?)!.cast<NdefPayloadPigeon>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NdefMessagePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NdefPayloadPigeon {
  NdefPayloadPigeon({
    required this.typeNameFormat,
    required this.type,
    required this.identifier,
    required this.payload,
  });

  TypeNameFormatPigeon typeNameFormat;

  Uint8List type;

  Uint8List identifier;

  Uint8List payload;

  List<Object?> _toList() {
    return <Object?>[
      typeNameFormat,
      type,
      identifier,
      payload,
    ];
  }

  Object encode() {
    return _toList();  }

  static NdefPayloadPigeon decode(Object result) {
    result as List<Object?>;
    return NdefPayloadPigeon(
      typeNameFormat: result[0]! as TypeNameFormatPigeon,
      type: result[1]! as Uint8List,
      identifier: result[2]! as Uint8List,
      payload: result[3]! as Uint8List,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NdefPayloadPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class FeliCaPollingResponsePigeon {
  FeliCaPollingResponsePigeon({
    required this.manufacturerParameter,
    this.requestData,
  });

  Uint8List manufacturerParameter;

  Uint8List? requestData;

  List<Object?> _toList() {
    return <Object?>[
      manufacturerParameter,
      requestData,
    ];
  }

  Object encode() {
    return _toList();  }

  static FeliCaPollingResponsePigeon decode(Object result) {
    result as List<Object?>;
    return FeliCaPollingResponsePigeon(
      manufacturerParameter: result[0]! as Uint8List,
      requestData: result[1] as Uint8List?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FeliCaPollingResponsePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class FeliCaReadWithoutEncryptionResponsePigeon {
  FeliCaReadWithoutEncryptionResponsePigeon({
    required this.statusFlag1,
    required this.statusFlag2,
    required this.blockData,
  });

  int statusFlag1;

  int statusFlag2;

  List<Uint8List> blockData;

  List<Object?> _toList() {
    return <Object?>[
      statusFlag1,
      statusFlag2,
      blockData,
    ];
  }

  Object encode() {
    return _toList();  }

  static FeliCaReadWithoutEncryptionResponsePigeon decode(Object result) {
    result as List<Object?>;
    return FeliCaReadWithoutEncryptionResponsePigeon(
      statusFlag1: result[0]! as int,
      statusFlag2: result[1]! as int,
      blockData: (result[2] as List<Object?>?)!.cast<Uint8List>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FeliCaReadWithoutEncryptionResponsePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class FeliCaRequestServiceV2ResponsePigeon {
  FeliCaRequestServiceV2ResponsePigeon({
    required this.statusFlag1,
    required this.statusFlag2,
    required this.encryptionIdentifier,
    this.nodeKeyVersionListAES,
    this.nodeKeyVersionListDES,
  });

  int statusFlag1;

  int statusFlag2;

  int encryptionIdentifier;

  List<Uint8List>? nodeKeyVersionListAES;

  List<Uint8List>? nodeKeyVersionListDES;

  List<Object?> _toList() {
    return <Object?>[
      statusFlag1,
      statusFlag2,
      encryptionIdentifier,
      nodeKeyVersionListAES,
      nodeKeyVersionListDES,
    ];
  }

  Object encode() {
    return _toList();  }

  static FeliCaRequestServiceV2ResponsePigeon decode(Object result) {
    result as List<Object?>;
    return FeliCaRequestServiceV2ResponsePigeon(
      statusFlag1: result[0]! as int,
      statusFlag2: result[1]! as int,
      encryptionIdentifier: result[2]! as int,
      nodeKeyVersionListAES: (result[3] as List<Object?>?)?.cast<Uint8List>(),
      nodeKeyVersionListDES: (result[4] as List<Object?>?)?.cast<Uint8List>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FeliCaRequestServiceV2ResponsePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class FeliCaRequestSpecificationVersionResponsePigeon {
  FeliCaRequestSpecificationVersionResponsePigeon({
    required this.statusFlag1,
    required this.statusFlag2,
    this.basicVersion,
    this.optionVersion,
  });

  int statusFlag1;

  int statusFlag2;

  Uint8List? basicVersion;

  Uint8List? optionVersion;

  List<Object?> _toList() {
    return <Object?>[
      statusFlag1,
      statusFlag2,
      basicVersion,
      optionVersion,
    ];
  }

  Object encode() {
    return _toList();  }

  static FeliCaRequestSpecificationVersionResponsePigeon decode(Object result) {
    result as List<Object?>;
    return FeliCaRequestSpecificationVersionResponsePigeon(
      statusFlag1: result[0]! as int,
      statusFlag2: result[1]! as int,
      basicVersion: result[2] as Uint8List?,
      optionVersion: result[3] as Uint8List?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FeliCaRequestSpecificationVersionResponsePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class FeliCaStatusFlagPigeon {
  FeliCaStatusFlagPigeon({
    required this.statusFlag1,
    required this.statusFlag2,
  });

  int statusFlag1;

  int statusFlag2;

  List<Object?> _toList() {
    return <Object?>[
      statusFlag1,
      statusFlag2,
    ];
  }

  Object encode() {
    return _toList();  }

  static FeliCaStatusFlagPigeon decode(Object result) {
    result as List<Object?>;
    return FeliCaStatusFlagPigeon(
      statusFlag1: result[0]! as int,
      statusFlag2: result[1]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FeliCaStatusFlagPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class Iso7816ApduPigeon {
  Iso7816ApduPigeon({
    required this.instructionClass,
    required this.instructionCode,
    required this.p1Parameter,
    required this.p2Parameter,
    required this.data,
    required this.expectedResponseLength,
  });

  int instructionClass;

  int instructionCode;

  int p1Parameter;

  int p2Parameter;

  Uint8List data;

  int expectedResponseLength;

  List<Object?> _toList() {
    return <Object?>[
      instructionClass,
      instructionCode,
      p1Parameter,
      p2Parameter,
      data,
      expectedResponseLength,
    ];
  }

  Object encode() {
    return _toList();  }

  static Iso7816ApduPigeon decode(Object result) {
    result as List<Object?>;
    return Iso7816ApduPigeon(
      instructionClass: result[0]! as int,
      instructionCode: result[1]! as int,
      p1Parameter: result[2]! as int,
      p2Parameter: result[3]! as int,
      data: result[4]! as Uint8List,
      expectedResponseLength: result[5]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Iso7816ApduPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class Iso7816ResponseApduPigeon {
  Iso7816ResponseApduPigeon({
    required this.payload,
    required this.statusWord1,
    required this.statusWord2,
  });

  Uint8List payload;

  int statusWord1;

  int statusWord2;

  List<Object?> _toList() {
    return <Object?>[
      payload,
      statusWord1,
      statusWord2,
    ];
  }

  Object encode() {
    return _toList();  }

  static Iso7816ResponseApduPigeon decode(Object result) {
    result as List<Object?>;
    return Iso7816ResponseApduPigeon(
      payload: result[0]! as Uint8List,
      statusWord1: result[1]! as int,
      statusWord2: result[2]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Iso7816ResponseApduPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class Iso15693SystemInfoPigeon {
  Iso15693SystemInfoPigeon({
    required this.dataStorageFormatIdentifier,
    required this.applicationFamilyIdentifier,
    required this.blockSize,
    required this.totalBlocks,
    required this.icReference,
  });

  int dataStorageFormatIdentifier;

  int applicationFamilyIdentifier;

  int blockSize;

  int totalBlocks;

  int icReference;

  List<Object?> _toList() {
    return <Object?>[
      dataStorageFormatIdentifier,
      applicationFamilyIdentifier,
      blockSize,
      totalBlocks,
      icReference,
    ];
  }

  Object encode() {
    return _toList();  }

  static Iso15693SystemInfoPigeon decode(Object result) {
    result as List<Object?>;
    return Iso15693SystemInfoPigeon(
      dataStorageFormatIdentifier: result[0]! as int,
      applicationFamilyIdentifier: result[1]! as int,
      blockSize: result[2]! as int,
      totalBlocks: result[3]! as int,
      icReference: result[4]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Iso15693SystemInfoPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NfcReaderSessionErrorPigeon {
  NfcReaderSessionErrorPigeon({
    required this.code,
    required this.message,
  });

  NfcReaderErrorCodePigeon code;

  String message;

  List<Object?> _toList() {
    return <Object?>[
      code,
      message,
    ];
  }

  Object encode() {
    return _toList();  }

  static NfcReaderSessionErrorPigeon decode(Object result) {
    result as List<Object?>;
    return NfcReaderSessionErrorPigeon(
      code: result[0]! as NfcReaderErrorCodePigeon,
      message: result[1]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NfcReaderSessionErrorPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NfcVasCommandConfigurationPigeon {
  NfcVasCommandConfigurationPigeon({
    required this.mode,
    required this.passIdentifier,
    this.url,
  });

  NfcVasCommandConfigurationModePigeon mode;

  String passIdentifier;

  String? url;

  List<Object?> _toList() {
    return <Object?>[
      mode,
      passIdentifier,
      url,
    ];
  }

  Object encode() {
    return _toList();  }

  static NfcVasCommandConfigurationPigeon decode(Object result) {
    result as List<Object?>;
    return NfcVasCommandConfigurationPigeon(
      mode: result[0]! as NfcVasCommandConfigurationModePigeon,
      passIdentifier: result[1]! as String,
      url: result[2] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NfcVasCommandConfigurationPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NfcVasResponsePigeon {
  NfcVasResponsePigeon({
    required this.status,
    required this.vasData,
    required this.mobileToken,
  });

  NfcVasResponseErrorCodePigeon status;

  Uint8List vasData;

  Uint8List mobileToken;

  List<Object?> _toList() {
    return <Object?>[
      status,
      vasData,
      mobileToken,
    ];
  }

  Object encode() {
    return _toList();  }

  static NfcVasResponsePigeon decode(Object result) {
    result as List<Object?>;
    return NfcVasResponsePigeon(
      status: result[0]! as NfcVasResponseErrorCodePigeon,
      vasData: result[1]! as Uint8List,
      mobileToken: result[2]! as Uint8List,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NfcVasResponsePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is PollingOptionPigeon) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is NdefStatusPigeon) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is TypeNameFormatPigeon) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is FeliCaPollingRequestCodePigeon) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    }    else if (value is FeliCaPollingTimeSlotPigeon) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    }    else if (value is MiFareFamilyPigeon) {
      buffer.putUint8(134);
      writeValue(buffer, value.index);
    }    else if (value is Iso15693RequestFlagPigeon) {
      buffer.putUint8(135);
      writeValue(buffer, value.index);
    }    else if (value is NfcVasCommandConfigurationModePigeon) {
      buffer.putUint8(136);
      writeValue(buffer, value.index);
    }    else if (value is NfcReaderErrorCodePigeon) {
      buffer.putUint8(137);
      writeValue(buffer, value.index);
    }    else if (value is NfcVasResponseErrorCodePigeon) {
      buffer.putUint8(138);
      writeValue(buffer, value.index);
    }    else if (value is TagPigeon) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    }    else if (value is NdefPigeon) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    }    else if (value is FeliCaPigeon) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    }    else if (value is Iso15693Pigeon) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    }    else if (value is Iso7816Pigeon) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    }    else if (value is MiFarePigeon) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    }    else if (value is NdefQueryStatusPigeon) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    }    else if (value is NdefMessagePigeon) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    }    else if (value is NdefPayloadPigeon) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    }    else if (value is FeliCaPollingResponsePigeon) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    }    else if (value is FeliCaReadWithoutEncryptionResponsePigeon) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    }    else if (value is FeliCaRequestServiceV2ResponsePigeon) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    }    else if (value is FeliCaRequestSpecificationVersionResponsePigeon) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    }    else if (value is FeliCaStatusFlagPigeon) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    }    else if (value is Iso7816ApduPigeon) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    }    else if (value is Iso7816ResponseApduPigeon) {
      buffer.putUint8(154);
      writeValue(buffer, value.encode());
    }    else if (value is Iso15693SystemInfoPigeon) {
      buffer.putUint8(155);
      writeValue(buffer, value.encode());
    }    else if (value is NfcReaderSessionErrorPigeon) {
      buffer.putUint8(156);
      writeValue(buffer, value.encode());
    }    else if (value is NfcVasCommandConfigurationPigeon) {
      buffer.putUint8(157);
      writeValue(buffer, value.encode());
    }    else if (value is NfcVasResponsePigeon) {
      buffer.putUint8(158);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PollingOptionPigeon.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : NdefStatusPigeon.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : TypeNameFormatPigeon.values[value];
      case 132: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FeliCaPollingRequestCodePigeon.values[value];
      case 133: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FeliCaPollingTimeSlotPigeon.values[value];
      case 134: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MiFareFamilyPigeon.values[value];
      case 135: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : Iso15693RequestFlagPigeon.values[value];
      case 136: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : NfcVasCommandConfigurationModePigeon.values[value];
      case 137: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : NfcReaderErrorCodePigeon.values[value];
      case 138: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : NfcVasResponseErrorCodePigeon.values[value];
      case 139: 
        return TagPigeon.decode(readValue(buffer)!);
      case 140: 
        return NdefPigeon.decode(readValue(buffer)!);
      case 141: 
        return FeliCaPigeon.decode(readValue(buffer)!);
      case 142: 
        return Iso15693Pigeon.decode(readValue(buffer)!);
      case 143: 
        return Iso7816Pigeon.decode(readValue(buffer)!);
      case 144: 
        return MiFarePigeon.decode(readValue(buffer)!);
      case 145: 
        return NdefQueryStatusPigeon.decode(readValue(buffer)!);
      case 146: 
        return NdefMessagePigeon.decode(readValue(buffer)!);
      case 147: 
        return NdefPayloadPigeon.decode(readValue(buffer)!);
      case 148: 
        return FeliCaPollingResponsePigeon.decode(readValue(buffer)!);
      case 149: 
        return FeliCaReadWithoutEncryptionResponsePigeon.decode(readValue(buffer)!);
      case 150: 
        return FeliCaRequestServiceV2ResponsePigeon.decode(readValue(buffer)!);
      case 151: 
        return FeliCaRequestSpecificationVersionResponsePigeon.decode(readValue(buffer)!);
      case 152: 
        return FeliCaStatusFlagPigeon.decode(readValue(buffer)!);
      case 153: 
        return Iso7816ApduPigeon.decode(readValue(buffer)!);
      case 154: 
        return Iso7816ResponseApduPigeon.decode(readValue(buffer)!);
      case 155: 
        return Iso15693SystemInfoPigeon.decode(readValue(buffer)!);
      case 156: 
        return NfcReaderSessionErrorPigeon.decode(readValue(buffer)!);
      case 157: 
        return NfcVasCommandConfigurationPigeon.decode(readValue(buffer)!);
      case 158: 
        return NfcVasResponsePigeon.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class FlutterApiPigeon {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void tagSessionDidBecomeActive();

  void tagSessionDidDetect(TagPigeon tag);

  void tagSessionDidInvalidateWithError(NfcReaderSessionErrorPigeon error);

  void vasSessionDidBecomeActive();

  void vasSessionDidReceive(List<NfcVasResponsePigeon> responses);

  void vasSessionDidInvalidateWithError(NfcReaderSessionErrorPigeon error);

  static void setUp(FlutterApiPigeon? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.tagSessionDidBecomeActive$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            api.tagSessionDidBecomeActive();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.tagSessionDidDetect$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.tagSessionDidDetect was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final TagPigeon? arg_tag = (args[0] as TagPigeon?);
          assert(arg_tag != null,
              'Argument for dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.tagSessionDidDetect was null, expected non-null TagPigeon.');
          try {
            api.tagSessionDidDetect(arg_tag!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.tagSessionDidInvalidateWithError$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.tagSessionDidInvalidateWithError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final NfcReaderSessionErrorPigeon? arg_error = (args[0] as NfcReaderSessionErrorPigeon?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.tagSessionDidInvalidateWithError was null, expected non-null NfcReaderSessionErrorPigeon.');
          try {
            api.tagSessionDidInvalidateWithError(arg_error!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.vasSessionDidBecomeActive$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            api.vasSessionDidBecomeActive();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.vasSessionDidReceive$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.vasSessionDidReceive was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final List<NfcVasResponsePigeon>? arg_responses = (args[0] as List<Object?>?)?.cast<NfcVasResponsePigeon>();
          assert(arg_responses != null,
              'Argument for dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.vasSessionDidReceive was null, expected non-null List<NfcVasResponsePigeon>.');
          try {
            api.vasSessionDidReceive(arg_responses!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.vasSessionDidInvalidateWithError$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.vasSessionDidInvalidateWithError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final NfcReaderSessionErrorPigeon? arg_error = (args[0] as NfcReaderSessionErrorPigeon?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.vasSessionDidInvalidateWithError was null, expected non-null NfcReaderSessionErrorPigeon.');
          try {
            api.vasSessionDidInvalidateWithError(arg_error!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class HostApiPigeon {
  /// Constructor for [HostApiPigeon].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HostApiPigeon({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<bool> tagSessionReadingAvailable() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.tagSessionReadingAvailable$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> tagSessionBegin({required List<PollingOptionPigeon> pollingOptions, required String? alertMessage, required bool invalidateAfterFirstRead, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.tagSessionBegin$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[pollingOptions, alertMessage, invalidateAfterFirstRead]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> tagSessionInvalidate({required String? alertMessage, required String? errorMessage}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.tagSessionInvalidate$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[alertMessage, errorMessage]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> tagSessionRestartPolling() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.tagSessionRestartPolling$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> tagSessionSetAlertMessage({required String alertMessage}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.tagSessionSetAlertMessage$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[alertMessage]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> vasSessionReadingAvailable() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.vasSessionReadingAvailable$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> vasSessionBegin({required List<NfcVasCommandConfigurationPigeon> configurations, required String? alertMessage}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.vasSessionBegin$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[configurations, alertMessage]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> vasSessionInvalidate({required String? alertMessage, required String? errorMessage}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.vasSessionInvalidate$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[alertMessage, errorMessage]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> vasSessionSetAlertMessage({required String alertMessage}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.vasSessionSetAlertMessage$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[alertMessage]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<NdefQueryStatusPigeon> ndefQueryNdefStatus({required String handle}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.ndefQueryNdefStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as NdefQueryStatusPigeon?)!;
    }
  }

  Future<NdefMessagePigeon?> ndefReadNdef({required String handle}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.ndefReadNdef$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as NdefMessagePigeon?);
    }
  }

  Future<void> ndefWriteNdef({required String handle, required NdefMessagePigeon message}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.ndefWriteNdef$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, message]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> ndefWriteLock({required String handle}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.ndefWriteLock$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<FeliCaPollingResponsePigeon> feliCaPolling({required String handle, required Uint8List systemCode, required FeliCaPollingRequestCodePigeon requestCode, required FeliCaPollingTimeSlotPigeon timeSlot, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaPolling$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, systemCode, requestCode, timeSlot]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FeliCaPollingResponsePigeon?)!;
    }
  }

  Future<List<Uint8List>> feliCaRequestService({required String handle, required List<Uint8List> nodeCodeList}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaRequestService$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, nodeCodeList]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<Uint8List>();
    }
  }

  Future<int> feliCaRequestResponse({required String handle}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaRequestResponse$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as int?)!;
    }
  }

  Future<FeliCaReadWithoutEncryptionResponsePigeon> feliCaReadWithoutEncryption({required String handle, required List<Uint8List> serviceCodeList, required List<Uint8List> blockList, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaReadWithoutEncryption$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, serviceCodeList, blockList]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FeliCaReadWithoutEncryptionResponsePigeon?)!;
    }
  }

  Future<FeliCaStatusFlagPigeon> feliCaWriteWithoutEncryption({required String handle, required List<Uint8List> serviceCodeList, required List<Uint8List> blockList, required List<Uint8List> blockData, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaWriteWithoutEncryption$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, serviceCodeList, blockList, blockData]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FeliCaStatusFlagPigeon?)!;
    }
  }

  Future<List<Uint8List>> feliCaRequestSystemCode({required String handle}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaRequestSystemCode$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<Uint8List>();
    }
  }

  Future<FeliCaRequestServiceV2ResponsePigeon> feliCaRequestServiceV2({required String handle, required List<Uint8List> nodeCodeList}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaRequestServiceV2$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, nodeCodeList]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FeliCaRequestServiceV2ResponsePigeon?)!;
    }
  }

  Future<FeliCaRequestSpecificationVersionResponsePigeon> feliCaRequestSpecificationVersion({required String handle}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaRequestSpecificationVersion$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FeliCaRequestSpecificationVersionResponsePigeon?)!;
    }
  }

  Future<FeliCaStatusFlagPigeon> feliCaResetMode({required String handle}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaResetMode$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FeliCaStatusFlagPigeon?)!;
    }
  }

  Future<Uint8List> feliCaSendFeliCaCommand({required String handle, required Uint8List commandPacket}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.feliCaSendFeliCaCommand$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, commandPacket]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Uint8List?)!;
    }
  }

  Future<Uint8List> miFareSendMiFareCommand({required String handle, required Uint8List commandPacket}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.miFareSendMiFareCommand$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, commandPacket]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Uint8List?)!;
    }
  }

  Future<Iso7816ResponseApduPigeon> miFareSendMiFareISO7816Command({required String handle, required Iso7816ApduPigeon apdu}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.miFareSendMiFareISO7816Command$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, apdu]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Iso7816ResponseApduPigeon?)!;
    }
  }

  Future<Iso7816ResponseApduPigeon> miFareSendMiFareISO7816CommandRaw({required String handle, required Uint8List data}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.miFareSendMiFareISO7816CommandRaw$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, data]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Iso7816ResponseApduPigeon?)!;
    }
  }

  Future<Iso7816ResponseApduPigeon> iso7816SendCommand({required String handle, required Iso7816ApduPigeon apdu}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso7816SendCommand$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, apdu]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Iso7816ResponseApduPigeon?)!;
    }
  }

  Future<Iso7816ResponseApduPigeon> iso7816SendCommandRaw({required String handle, required Uint8List data}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso7816SendCommandRaw$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, data]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Iso7816ResponseApduPigeon?)!;
    }
  }

  Future<void> iso15693StayQuiet({required String handle}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693StayQuiet$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> iso15693ReadSingleBlock({required String handle, required List<Iso15693RequestFlagPigeon> requestFlags, required int blockNumber, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693ReadSingleBlock$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, requestFlags, blockNumber]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Uint8List?)!;
    }
  }

  Future<void> iso15693WriteSingleBlock({required String handle, required List<Iso15693RequestFlagPigeon> requestFlags, required int blockNumber, required Uint8List dataBlock, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693WriteSingleBlock$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, requestFlags, blockNumber, dataBlock]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693LockBlock({required String handle, required List<Iso15693RequestFlagPigeon> requestFlags, required int blockNumber, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693LockBlock$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, requestFlags, blockNumber]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<Uint8List>> iso15693ReadMultipleBlocks({required String handle, required List<Iso15693RequestFlagPigeon> requestFlags, required int blockNumber, required int numberOfBlocks, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693ReadMultipleBlocks$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, requestFlags, blockNumber, numberOfBlocks]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<Uint8List>();
    }
  }

  Future<void> iso15693WriteMultipleBlocks({required String handle, required List<Iso15693RequestFlagPigeon> requestFlags, required int blockNumber, required int numberOfBlocks, required List<Uint8List> dataBlocks, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693WriteMultipleBlocks$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, requestFlags, blockNumber, numberOfBlocks, dataBlocks]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693Select({required String handle, required List<Iso15693RequestFlagPigeon> requestFlags}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693Select$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, requestFlags]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693ResetToReady({required String handle, required List<Iso15693RequestFlagPigeon> requestFlags}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693ResetToReady$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, requestFlags]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693WriteAfi({required String handle, required List<Iso15693RequestFlagPigeon> requestFlags, required int afi, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693WriteAfi$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, requestFlags, afi]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693LockAfi({required String handle, required List<Iso15693RequestFlagPigeon> requestFlags}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693LockAfi$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, requestFlags]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693WriteDsfId({required String handle, required List<Iso15693RequestFlagPigeon> requestFlags, required int dsfId, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693WriteDsfId$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, requestFlags, dsfId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693LockDsfId({required String handle, required List<Iso15693RequestFlagPigeon> requestFlags}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693LockDsfId$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, requestFlags]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Iso15693SystemInfoPigeon> iso15693GetSystemInfo({required String handle, required List<Iso15693RequestFlagPigeon> requestFlags}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693GetSystemInfo$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, requestFlags]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Iso15693SystemInfoPigeon?)!;
    }
  }

  Future<List<int>> iso15693GetMultipleBlockSecurityStatus({required String handle, required List<Iso15693RequestFlagPigeon> requestFlags, required int blockNumber, required int numberOfBlocks, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693GetMultipleBlockSecurityStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, requestFlags, blockNumber, numberOfBlocks]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<int>();
    }
  }

  Future<Uint8List> iso15693CustomCommand({required String handle, required List<Iso15693RequestFlagPigeon> requestFlags, required int customCommandCode, required Uint8List customRequestParameters, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.nfc_manager.HostApiPigeon.iso15693CustomCommand$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[handle, requestFlags, customCommandCode, customRequestParameters]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Uint8List?)!;
    }
  }
}
